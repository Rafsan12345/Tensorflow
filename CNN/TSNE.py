# ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржоржкрзЛрж░рзНржЯ
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler

# ЁЯОп ржзрж░рж┐ ржЧрзНрж░рж╛ржорзЗрж░ рзй ржзрж░ржирзЗрж░ ржорж╛ржирзБрж╖ ржЖржЫрзЗ (рждрж░рзБржг, ржоржзрзНржпржмрзЯрж╕рзА, ржмрзГржжрзНржз)
# ржкрзНрж░рждрж┐ржЬржирзЗрж░ рззрзжржЯрж┐ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп (ржлрж┐ржЪрж╛рж░): ржпрзЗржоржи ржмрзЯрж╕, ржЖрзЯ, ржЬржорж┐, ржЧрж░рзБ ржЗрждрзНржпрж╛ржжрж┐

# рж░тАНрзНржпрж╛ржирзНржбржо ржбрзЗржЯрж╛ рждрзИрж░рж┐
np.random.seed(0)
group1 = np.random.normal(loc=20, scale=5, size=(100, 10))  # рждрж░рзБржг
group2 = np.random.normal(loc=50, scale=5, size=(100, 10))  # ржоржзрзНржпржмрзЯрж╕рзА
group3 = np.random.normal(loc=70, scale=5, size=(100, 10))  # ржмрзГржжрзНржз

# рж╕ржм ржбрзЗржЯрж╛ ржПржХрждрзНрж░рзЗ ржЬрзЛрзЬрж╛ ржжрж┐ржЪрзНржЫрж┐
X = np.vstack((group1, group2, group3))  # shape: (300, 10)
y = [0]*100 + [1]*100 + [2]*100          # ржЧрзНрж░рзБржк рж▓рзЗржмрзЗрж▓

# Standardization (TSNE ржПрж░ ржЬржирзНржп ржнрж╛рж▓рзЛ Practice)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# тЬЕ TSNE ржжрж┐рзЯрзЗ ржбрзЗржЯрж╛ржХрзЗ рзи ржбрж╛ржЗржорзЗржирж╢ржирзЗ ржирж╛ржорж╛ржирзЛ
tsne = TSNE(n_components=2, perplexity=30, random_state=42)
X_2d = tsne.fit_transform(X_scaled)

# ЁЯОи Visualization (Plotting TSNE)
plt.figure(figsize=(8, 6))
plt.scatter(X_2d[:, 0], X_2d[:, 1], c=y, cmap='viridis', s=60)
plt.title("ржЧрзНрж░рж╛ржорзЗрж░ ржорж╛ржирзБрж╖рзЗрж░ TSNE Visualization")
plt.xlabel("TSNE Dimension 1")
plt.ylabel("TSNE Dimension 2")
plt.colorbar(label='ржЧрзНрж░рзБржк (рждрж░рзБржг=0, ржоржзрзНржпржмрзЯрж╕рзА=1, ржмрзГржжрзНржз=2)')
plt.grid(True)
plt.show()

# ЁЯУК ржЪрж╛ржЗрж▓рзЗ ржбрзЗржЯрж╛рж╕рзЗржЯ ржЯрзЗржмрж┐рж▓ ржЖржХрж╛рж░рзЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛ
df = pd.DataFrame(X_scaled, columns=[f"Feature_{i+1}" for i in range(10)])
df['Group'] = y
print(df.head())
