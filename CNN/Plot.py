import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

# Dataset directory path
DATASET_DIR = "dataset"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ dataset ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶æ‡¶• ‡¶¶‡¶ø‡¶®

# ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (grayscale, batch size ‡¶¨‡ßú ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü)
datagen = ImageDataGenerator(rescale=1./255)

generator = datagen.flow_from_directory(
    DATASET_DIR,
    target_size=(28, 28),
    color_mode='grayscale',
    class_mode='sparse',
    batch_size=1000,  # ‡¶¨‡ßú ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶∏‡¶æ‡¶á‡¶ú
    shuffle=False
)

# ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶®
X, y = next(generator)

print(f"‚úÖ X shape: {X.shape}")
print(f"‚úÖ y shape: {y.shape}")

# NaN ‡¶Ö‡¶•‡¶¨‡¶æ inf ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
if np.isnan(X).any() or np.isinf(X).any():
    print("üö´ Data contains NaNs or infinite values!")
    # NaN/inf ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
    X = np.nan_to_num(X)

# ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ zeros ‡¶ö‡ßá‡¶ï (‡¶∏‡¶¨ ‡¶™‡¶ø‡¶ï‡ßç‡¶∏‡ßá‡¶≤ zero ‡¶•‡¶æ‡¶ï‡¶≤‡ßá)
zero_images = np.all(X == 0, axis=(1,2,3))
if np.any(zero_images):
    print(f"‚ö†Ô∏è Found {np.sum(zero_images)} zero images. They will be removed.")
    X = X[~zero_images]
    y = y[~zero_images]

# 4D to 2D reshape (for PCA/TSNE)
X_flat = X.reshape(X.shape[0], -1)

# PCA ‡¶¶‡¶ø‡ßü‡ßá dimension ‡¶ï‡¶Æ‡¶æ‡¶® (TSNE ‡¶Ü‡¶ó‡ßá)
pca = PCA(n_components=50)
X_pca = pca.fit_transform(X_flat)

# TSNE ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶è‡¶ñ‡¶® 50D ‡¶•‡ßá‡¶ï‡ßá 2D)
tsne = TSNE(n_components=2, random_state=42)
X_tsne = tsne.fit_transform(X_pca)

# ‡¶™‡ßç‡¶≤‡¶ü‡¶ø‡¶Ç
plt.figure(figsize=(10, 8))
scatter = plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, cmap='tab10', s=10)
plt.colorbar(scatter, ticks=range(10))
plt.title("TSNE visualization of dataset")
plt.xlabel("TSNE 1")
plt.ylabel("TSNE 2")
plt.show()
